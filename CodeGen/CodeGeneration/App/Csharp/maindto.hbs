using {{Namespace}}.Common;
using System;
using System.Linq;
using System.Collections.Generic;
using {{Namespace}}.Entities;

namespace {{Namespace}}.Rpc.{{Parent.Snake}}
{
    public class {{Parent.Pascal}}_{{Class.Pascal}}DTO : DataDTO
    {
{{#each Class.Properties}}
{{#if IsPrimitive}}
        public {{Type}} {{Pascal}} { get; set; }
{{/if}}
{{#if IsReference}}
        public {{@root.Parent.Pascal}}_{{Class.Pascal}}DTO {{Pascal}} { get; set; }
{{/if}}
{{#if IsList}}
        public List<{{@root.Parent.Pascal}}_{{Class.Pascal}}DTO>
    {{Pascal}} { get; set; }
    {{/if}}
    {{/each}}
    {{#if Class.ContainsFlag}}
    public DateTime CreatedAt { get; set; }
    public DateTime UpdatedAt { get; set; }
    {{/if}}
    public {{Parent.Pascal}}_{{Class.Pascal}}DTO() {}
    public {{Parent.Pascal}}_{{Class.Pascal}}DTO({{Class.Pascal}} {{Class.Pascal}})
    {
    {{#each Class.Properties}}
    {{#if IsPrimitive}}
    this.{{Pascal}} = {{../Class.Pascal}}.{{Pascal}};
    {{/if}}
    {{#if IsReference}}
    this.{{Pascal}} = {{../Class.Pascal}}.{{Pascal}} == null ? null : new {{@root.Parent.Pascal}}_{{Class.Pascal}}DTO({{../Class.Pascal}}.{{Pascal}});
    {{/if}}
    {{#if IsList}}
    this.{{Pascal}} = {{../Class.Pascal}}.{{Pascal}}?.Select(x => new {{@root.Parent.Pascal}}_{{Class.Pascal}}DTO(x)).ToList();
    {{/if}}
    {{/each}}
    {{#if Class.ContainsFlag}}
    this.CreatedAt = {{Class.Pascal}}.CreatedAt;
    this.UpdatedAt = {{Class.Pascal}}.UpdatedAt;
    {{/if}}
    this.Errors = {{Class.Pascal}}.Errors;
    }
    }

    public class {{Parent.Pascal}}_{{Class.Pascal}}FilterDTO : FilterDTO
    {
    {{#each Class.Properties}}
    {{#if IsFilter}}
    public {{FilterType}} {{Pascal}} { get; set; }
    {{/if}}
    {{/each}}
    {{#if Class.ContainsFlag}}
    public DateFilter CreatedAt { get; set; }
    public DateFilter UpdatedAt { get; set; }
    {{/if}}
    public {{Class.Pascal}}Order OrderBy { get; set; }
    }
    }
